{"version":3,"sources":["components/App.module.css","components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","components/Counter.js","components/App.js","index.js"],"names":["module","exports","Statistics","state","good","props","neutral","bad","this","total","positivePercentage","Component","FeedbackButton","styled","button","FeedbackButtonLi","li","FeedbackOptions","onLeaveFeedback","options","Object","keys","map","option","key","type","onClick","Section","children","title","Notification","message","Counter","handleIncrement","evt","cangedRate","target","textContent","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","App","shell","styles","className","ReactDOM","render","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,MAAQ,qB,2JCELC,E,2MASnBC,MAAQ,CACNC,KAAM,EAAKC,MAAMD,KACjBE,QAAS,EAAKD,MAAMC,QACpBC,IAAK,EAAKF,MAAME,K,wEAGR,IAAD,EACmDC,KAAKH,MAAvDD,EADD,EACCA,KAAME,EADP,EACOA,QAASC,EADhB,EACgBA,IAAKE,EADrB,EACqBA,MAAOC,EAD5B,EAC4BA,mBACnC,OACE,iCACE,oCAAUN,GACV,uCAAaE,GACb,mCAASC,GACT,oCAAUE,GACV,iDAAuBC,EAAvB,W,GAvBgCC,a,yTCCxC,IAAMC,EAAiBC,IAAOC,OAAV,KASdC,EAAmBF,IAAOG,GAAV,KAyBPC,EArBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,QAC1C,OACE,oCACE,4BACGC,OAAOC,KAAKF,GAASG,KAAI,SAAAC,GAAM,OAC9B,kBAACR,EAAD,CAAkBS,IAAKD,GACrB,kBAACX,EAAD,CAAgBa,KAAK,SAASC,QAASR,GACpCK,UCPAI,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3B,OACE,oCACE,4BAAKA,GACJD,ICQQE,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,oCACE,2BAAIA,KCEWC,E,2MAOnB7B,MAAQ,CACNC,KAAM,EAAKC,MAAMD,KACjBE,QAAS,EAAKD,MAAMC,QACpBC,IAAK,EAAKF,MAAME,K,EAGlB0B,gBAAkB,SAAAC,GAChB,IAAMC,EAAaD,EAAIE,OAAOC,YAC9B,EAAKC,UAAS,SAAAC,GACZ,OAAO,eACJJ,EAAaI,EAAUJ,GAAc,O,EAK5CK,mBAAqB,SAAArC,GACnB,OAAOA,EAAMC,KAAOD,EAAMG,QAAUH,EAAMI,K,EAG5CkC,gCAAkC,SAAAtC,GAChC,OAAOuC,KAAKC,MACI,IAAbxC,EAAMC,MAAeD,EAAMC,KAAOD,EAAMG,QAAUH,EAAMI,O,wEAInD,IAAD,EACwBC,KAAKL,MAA5BC,EADD,EACCA,KAAME,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,oCACE,kBAAC,EAAD,CAASsB,MAAM,yBACb,kBAAC,EAAD,CACEV,QAASX,KAAKL,MACde,gBAAiBV,KAAKyB,mBAI1B,kBAAC,EAAD,CAASJ,MAAM,cACZrB,KAAKgC,mBAAmBhC,KAAKL,OAAS,EACrC,kBAAC,EAAD,CACEC,KAAMA,EACNE,QAASA,EACTC,IAAKA,EACLE,MAAOD,KAAKgC,mBAAmBhC,KAAKL,OACpCO,mBAAoBF,KAAKiC,gCACvBjC,KAAKL,SAIT,kBAAC,EAAD,CAAc4B,QAAQ,4B,GAvDGpB,a,iBCHhBiC,E,2MAWnBzC,MAAQ,CACNC,KAAM,EACNE,QAAS,EACTC,IAAK,G,wEAGG,IACAsC,EAAUC,IAAVD,MACR,OACE,6BAASE,UAAWF,GAClB,kBAAC,EAAD,CACEzC,KAAMI,KAAKL,MAAMC,KACjBE,QAASE,KAAKL,MAAMG,QACpBC,IAAKC,KAAKL,MAAMI,W,GAxBOI,aCAjCqC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c3eef83b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"shell\":\"App_shell__3QlhT\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Statistics extends Component {\r\n  static propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n  };\r\n\r\n  state = {\r\n    good: this.props.good,\r\n    neutral: this.props.neutral,\r\n    bad: this.props.bad,\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props;\r\n    return (\r\n      <section>\r\n        <p>Good: {good}</p>\r\n        <p>Neutral: {neutral}</p>\r\n        <p>Bad: {bad}</p>\r\n        <p>Total:{total}</p>\r\n        <p>Positive feedback: {positivePercentage} %</p>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackButton = styled.button`\r\n  margin: 5px;\r\n  padding: 2px;\r\n  border-radius: 5px;\r\n\r\n  &::first-letter {\r\n    text-transform: uppercase;\r\n  }\r\n`;\r\nconst FeedbackButtonLi = styled.li`\r\n  list-style: none;\r\n  display: inline;\r\n`;\r\nconst FeedbackOptions = ({ onLeaveFeedback, options }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {Object.keys(options).map(option => (\r\n          <FeedbackButtonLi key={option}>\r\n            <FeedbackButton type=\"button\" onClick={onLeaveFeedback}>\r\n              {option}\r\n            </FeedbackButton>\r\n          </FeedbackButtonLi>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.objectOf(PropTypes.number).isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ children, title }) => {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.object.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <>\r\n      <p>{message}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Statistics from './Statistics';\r\nimport FeedbackOptions from './FeedbackOptions';\r\nimport Section from './Section';\r\nimport Notification from './Notification';\r\n\r\nexport default class Counter extends Component {\r\n  static propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n  };\r\n\r\n  state = {\r\n    good: this.props.good,\r\n    neutral: this.props.neutral,\r\n    bad: this.props.bad,\r\n  };\r\n\r\n  handleIncrement = evt => {\r\n    const cangedRate = evt.target.textContent;\r\n    this.setState(prevState => {\r\n      return {\r\n        [cangedRate]: prevState[cangedRate] + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = state => {\r\n    return state.good + state.neutral + state.bad;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = state => {\r\n    return Math.round(\r\n      (state.good * 100) / (state.good + state.neutral + state.bad),\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n      <>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={this.state}\r\n            onLeaveFeedback={this.handleIncrement}\r\n          />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback(this.state) > 0 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback(this.state)}\r\n              positivePercentage={this.countPositiveFeedbackPercentage(\r\n                this.state,\r\n              )}\r\n            ></Statistics>\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Counter from './Counter';\nimport PropTypes from 'prop-types';\nimport styles from './App.module.css';\n\nexport default class App extends Component {\n  static propTypes = {\n    state: PropTypes.objectOf(\n      PropTypes.exact({\n        good: PropTypes.number.isRequired,\n        neutral: PropTypes.number.isRequired,\n        bad: PropTypes.number.isRequired,\n      }),\n    ),\n  };\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  render() {\n    const { shell } = styles;\n    return (\n      <section className={shell}>\n        <Counter\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n        ></Counter>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}